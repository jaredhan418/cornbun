generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model vininfo {
  id         Int     @id @default(autoincrement())
  vin        String  @db.VarChar(17)
  userId     String? @db.VarChar(255)
  groupCode  String?
  currentLon String?
  currentLat String?
}

model vinGroup {
  id        Int     @id @default(autoincrement())
  groupCode String
  groupName String?
  ownerId   String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model voiceStorage {
  id        Int    @default(autoincrement())
  voiceFile Bytes?

  @@ignore
}

model otk {
  id          Int     @id @default(autoincrement())
  otkKey      String
  accessToken String
  vin         String
  feature     String?
}
